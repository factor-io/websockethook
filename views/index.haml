!!!
%html
  %head
    %title Web Socket Hook
    %script(src='//code.jquery.com/jquery-2.2.3.min.js' type='text/javascript')
    %script(src='//maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js' type='text/javascript')
    %script(src='/script/app.js' type='text/javascript')
    %link(href='//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css' rel='stylesheet' type='text/css' media='all')
    %link(href='//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css' rel='stylesheet' type='text/css' media='all')
    %script
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

      ga('create', 'UA-2687661-19', 'auto');
      ga('send', 'pageview');

  %body
    %a(href='https://github.com/factor-io/websockethook')
      %img(style='position: absolute; top: 0; right: 0; border: 0;' src='https://camo.githubusercontent.com/e7bbb0521b397edbd5fe43e7f760759336b5e05f/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f677265656e5f3030373230302e706e67' alt='Fork me on GitHub' data-canonical-src='https://s3.amazonaws.com/github/ribbons/forkme_right_green_007200.png')

    .container
      .row
        .col-md-12
          %h1
            Web Socket Hook
          .lead
            Built by
            %a(href='https://factor.io/') Factor.io
            and hosted on
            %a(href='https://websockethook.io') websockethook.io
          %blockquote
            %strong Web Socket Hook
            is a bridge between web hooks and web sockets. You can connect to the service using a web socket client and register a web hook. On the other end you can POST messages to that web hook address, which will be received by your web socket client.
          %blockquote
            %strong Why?
            So that you can build apps that respond to web hooks even though your app is not directly accessible from the internet. And that's exactly what
            %a(href='https://factor.io/') Factor.io
            needed to run your workflows on/with  your private infrastructure.

      .row
        .col-md-12
          %h2 Take it for a spin
      .row
        .col-md-6
          
          %p By opening this page you already initiated a new Web Socket connection to the server. You should see a green message "Web socket is open" to the right.
          %p The initiation of a new web socket also registered a new random default web hook. You can see the list of registered webhooks on the right. 
          %p From the command line run the command from the "cURL Command" column in the "Registered Hooks" table.
          %p
            You should see
            %code {"foo":"bar"}
            appear in the "Incoming Messages" table.
          %p Pretty cool huh?
          %p
            Now try to change the values in the
            %code --data
            value in the curl command.
          %p Lastly, you can also set your own IDs.
          %form.form-inline#register
            .form-group
              %input.form-control#id(type='text' placeholder='ID' value='foo')
            %button.btn.btn-primary(type='submit') Register
          %p This way you can create a web hook with a third party service and always listen on the same address, even if the web socket connection is restarted. It also allows multiple web socket connections to share the same web hook address. You can test this by opening two browser windows and registered a web-hook with the same address and POSTing data to it.

        .col-md-6
          #alerts
          %h4 Registered Hooks:
          %table.table.table-bordered
            %thead
              %tr
                %th ID
                %th cURL command
            %tbody#hooks
              %tr#waiting
                %td
                  .fa.fa-refresh.fa-spin
                  waiting...
          %h4 Incoming messages:
          %table.table.table-bordered
            %thead
              %tr
                %th Hook ID
                %th Message
            %tbody#messages
              %tr#waiting
                %td(colspan='2')
                  .fa.fa-refresh.fa-spin
                  waiting...

      .row
        .col-md-12
          %h2 How does it work?
          %p When a connection is established the service sends a message similar to this.
          %pre
            %code
              :preserve
                {
                  "type": "registered",
                  "data": {
                    "id": "31dd0a8df6dc6d1b",
                    "url": "/hook/31dd0a8df6dc6d1b"
                  }
                }
          %p
            which tells us that it created a web hook at the address
            %code /hook/31dd0a8df6dc6d1b
            and can receive HTTP POST messages.
          %p
            Now you can perform a
            %code curl
            command to POST to this endpoint. When the POST occurs, the service will send another message over the web socket similar to this.
          %pre
            %code
              :preserve
                {
                  "type": "hook",
                  "id": "31dd0a8df6dc6d1b",
                  "data": {
                    "foo": "bar"
                  }
                }
          %p You can also register a new web hook over the open web socket by sending a message like this.
          %pre
            %code
              :preserve
                {
                  "type": "register",
                  "id": "my_static_address"
                }
          %p And of course you can un-register this hook with this command
          %pre
            %code
              :preserve
                {
                  "type": "unregister",
                  "id": "my_static_address"
                }
      .row
        .col-md-12
          %h2 Disclaimer
          %p No tests! This is currently only tested manually.